#!/usr/bin/env python
""" Extract data from sarif files in table form.
"""
import argparse
import json
from sarif_cli import signature
from sarif_cli import typegraph
import sys
from pprint import pprint
from collections import defaultdict
import pandas as pd

#
# Start processing 
#
parser = argparse.ArgumentParser(description='Read a sarif file and produce tabular output.')
parser.add_argument('file', metavar='sarif-file', type=str, help='input file, - for stdin')
# XX
# parser.add_argument('-t', '--typedef-signatures', action="store_true",
#                     help='Give every object signature a type and report by types')
args = parser.parse_args()

#
# Load data
# 
with open(args.file, 'r') if args.file != '-' else sys.stdin as fp:
    sarif_struct = json.load(fp)

#
# Preprocess raw SARIF to get smaller signature
#
context = signature.Context(
    {
        "string" : "String",
        "int" : "Int",
        "bool" : "Bool"
    }
) 
sarif_struct = signature.fillsig(args, sarif_struct, context)
    
#
# Use reference type graph (signature) to traverse sarif and attach values to tables
#
tgraph = typegraph.Typegraph(typegraph.struct_graph_2022_02_01)
typegraph.destructure(tgraph, typegraph.start_node_2022_02_01, sarif_struct)

if 0:
    import IPython
    IPython.embed(header="""
    --------------------------------- 
    ipython repl for

        tgraph = typegraph.Typegraph(typegraph.struct_graph_2022_02_01)

    --------------------------------- 
    Sanity checks:
        In [4]: tgraph.fields
        Out[4]: 
        {'String': None,
         'Int': None,
         'Bool': None,
         ...
         }
        In [6]: tgraph.instances['String']
        Out[6]: []

        In [7]: tgraph.instances['Int']
        Out[7]: []

        In [8]: tgraph.instances['Bool']
        Out[8]: []

    Select value checks:
        In [9]: tgraph.instances['Struct6787']
        Out[9]: 
        [(4358601472,
          'https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json',
          4362190016,
          '2.1.0')]

        In [10]: tgraph.fields['Struct6787']
        Out[10]: ['$schema', 'runs', 'version']

        In [5]: tgraph.instances['Array0177']
        Out[5]: 
        [(4337396800, 0, 'Struct3388', 4337396928),
         (4337396800, 1, 'Struct3388', 4337397056)]

        In [12]: tgraph.fields['Array0177']
        Out[12]: [0]

        In [9]: tgraph.instances['Array7069'][0:5]
        Out[9]: 
        [(4337397248, 0, 'String', '\r\n'),
         (4337397248, 1, 'String', '\n'),
         (4337397248, 2, 'String', '\u2028'),
         (4337397248, 3, 'String', '\u2029'),
         (4339863424, 0, 'String', 'maintainability')]


        In [10]: tgraph.instances['Struct6299'][:3]
        Out[10]: 
        [(4315110720, 17, 1214, 13, 1214),
         (4315111232, -1, -1, 1, -1),
         (4315124096, 30, 847, 17, 847)]

        In [11]: tgraph.fields['Struct6299']
        Out[11]: ['endColumn', 'endLine', 'startColumn', 'startLine']
    """)

#
# Form output tables
# 
typegraph.attach_tables(tgraph)

import IPython
IPython.embed(header="""
--------------------------------- 
    ipython repl for tables

---------------------------------

tgraph.dataframes
In [7]: sorted(tgraph.dataframes.keys())
Out[7]: 
['Array0177',
 'Array0350',
 'Array1075',...]

sorted(tgraph.dataframes.keys())
tgraph.dataframes['Array0177']
tgraph.dataframes['Struct3388']
tgraph.signature_graph['Struct3388']

XX: reproduce the 

    file:line:col:line:col: message

output from 

    ../../bin/sarif-results-summary results.sarif | less

as test.  Sample:

    RESULT: static/js/fileuploader.js:1214:13:1214:17: Unused variable size.

Collect typedef/fields via typegraph.pdf:

    static/js/fileuploader.js
        Struct2685/uri

        In [22]: d1 = tgraph.dataframes['Struct2685']
        In [24]: d1[d1.uri == "static/js/fileuploader.js"]
        Out[24]: 
              struct_id  index                        uri  uriBaseId
        0    4856718656      0  static/js/fileuploader.js  %SRCROOT%
        77   4856758336      0  static/js/fileuploader.js  %SRCROOT%
        ...

    :1214:13:1214:17:
        Struct6299/startLine/startColumn/endLine/endColumn

    Unused variable size.
        Struct2774/message
            d1 = tgraph.dataframes['Struct2774']
            In [31]: d1[d1.text.str.contains("Unused variable size")]
            Out[31]: 
                  struct_id                   text
            1    4856749504  Unused variable size.
            103  4856879296  Unused variable size.

Follow the edges in typegraph.pdf to find joining typedefs and paths.

    Struct4963

    Struct2683


""")





if args.dot_output:
    signature._signature(args, sarif_struct, context)
    struct_graph = [(typedef, sig) for sig, typedef in context.sig_to_typedef.items()]
    signature.write_header(sys.stdout)
    for typedef, sig in struct_graph:
        signature.write_node(sys.stdout, typedef, sig)
    for typedef, sig in struct_graph:
        signature.write_edges(args, sys.stdout, typedef, sig)
    signature.write_footer(sys.stdout)

elif args.typedef_signatures:
    signature._signature(args, sarif_struct, context)
    struct_graph = dict((typedef, sig) for sig,typedef in context.sig_to_typedef.items())
    pprint(struct_graph, sys.stdout, indent=4)

else:
    pprint(signature._signature(args, sarif_struct, context), sys.stdout, indent=2)
